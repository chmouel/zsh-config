#compdef nova

__nova_long_caching_policy()
{
  oldp=( "$1"(Nmh+1) )     # 24 hour
  (( $#oldp ))
}

__nova_small_caching_policy() {
  typeset -a old

  # cache for a minute
  old=( "$1"(mm+10) )
  (( $#old )) && return 0

  return 1
}

__nova_commands () {
    local cache_policy _result
    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __nova_long_caching_policy
    fi
    if ( [[ ${+_nova_subcommands} -eq 0 ]] || _cache_invalid nova_subcommands) \
        && ! _retrieve_cache nova_subcommands;
    then
        _result=(${(f)"$(_call_program commands nova 2>&1|sed -n -e '/^  <subcommand>/,/Optional arguments/ { /^    [a-zA-Z0-9]/ { s/^ *//;s/^\([^ ]*\)[ ]*\(.*\)$/\1:\2/;p ;} ;}')"})
        _nova_subcommands=($_result 'help:Show help for a command')
        _store_cache nova_subcommands _nova_subcommands
    fi
    _describe -t nova-commands "nova command" _nova_subcommands
}

__nova_runningvms() {
    local cache_policy

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __nova_small_caching_policy
    fi
    cachename="nova_runningvms"

    local expl
    local -a result
    if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid ${cachename#_} ) \
        && ! _retrieve_cache ${cachename#_}; then
        _message "Searching for ${searchterm}..."
        result=(${(f)"$(_call_program commands nova list|sed -e '1,3d;$d'|awk '{print $4}')"})
        echo $result
        _store_cache ${cachename#_} result
    fi
    _wanted runningvms expl 'Running VMS' compadd -a result
}

__nova_flavors() {
    local cache_policy

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __nova_small_caching_policy
    fi
    cachename="nova_flavors"

    local expl
    local -a result
    if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid ${cachename#_} ) \
        && ! _retrieve_cache ${cachename#_}; then
        _message "Searching for ${searchterm}..."
        result=(${(f)"$(_call_program commands nova flavor-list|awk \
                 '$4 ~ "Name|^$" {next}{gsub(/[ ]*$/, "");print $4": Memory:",$6,"Disk:",$8"GB","Vcpu:" $13}')"})
        _store_cache ${cachename#_} result
    fi
    _describe -t nova-flavors "Nova Flavors" result
}

__nova_images() {
    local cache_policy

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __nova_small_caching_policy
    fi
    cachename="nova_images"

    local expl
    local -a result
    if ( [[ ${(P)+cachename} -eq 0 ]] || _cache_invalid ${cachename#_} ) \
        && ! _retrieve_cache ${cachename#_}; then
        _message "Searching for ${searchterm}..."
        result=(${(f)"$(_call_program commands nova image-list|sed -e '1,3d;$d' -e 's/ | /|/g;s/| //'|awk -F\| '{print $1":"$2}')"})
        _store_cache ${cachename#_} result
    fi
    _describe -t nova-images "Nova Images" result
}

__nova_volumes() {
    rets=(${(f)"$(_call_program commands nova volume-list|sed -e '1,3d;$d' -e 's/ | /|/g;s/| //;s/ \{2,\}//'| \
          awk -F\| '{print $1":"$3" -- Size:"$4" Type: "$5}')"})
    _describe -t nova-volumes "Nova Volumes" rets
}

__nova_secgroups() {
    rets=(${(f)"$(_call_program commands nova secgroup-list|sed -e '1,3d;$d;s/[ ]*//'|awk -F\| '{print $2}')"})
    _describe -t nova-segroups "Nova Secgroups"  rets
}


__nova_floatingips() {
    local rets=(${(f)"$(_call_program commands nova floating-ip-list|sed '1,3d'|awk '{print $4}')"})
    _describe -t nova-floatingips "Nova Floatings"  rets

}


__nova_subcommand () {
    case "$words[1]" in
        (console-log|delete)
            _arguments \
                ':vms:__nova_runningvms'
            ;;
        (show)
            _arguments \
                '--minimal[Skips flavor/image lookups when showing servers]' \
                ':vms:__nova_runningvms'
            ;;
        (boot)
            _arguments \
                '--flavor[Name or ID of flavor]:flavors:__nova_flavors' \
                '--image[Name or ID of image]:images:__nova_images' \
                '--image-with=-[Image metadata property]:image_metadata: ' \
                '--boot-volume[Volume ID to boot from]:volumes:__nova_volumes'
            ;;
        (image-show|image-delete)
            _arguments \
                ':images:__nova_images'
            ;;
        (flavor-show|flavor-delete)
            _arguments \
                ':images:__nova_flavors'
            ;;
        (secgroup-list-rules)
            _arguments \
                ':images:__nova_secgroups'
            ;;
        (floating-ip-associate)
            _arguments -C \
            '1:floating-ip-associates:__nova_runningvms' \
            ':floating-ip-associates:__nova_floatingips' \
        (help)
            _arguments \
                ':vms:__nova_commands'
            ;;
         (*)
             _message 'Unkown sub command'
      esac
}

_nova() {
    local curcontext="$curcontext" state
     _arguments -C \
         '--version' \
         '--debug' \
         '--os-cache' \
         '(-): :->command' \
         '(-)*:: :->option-or-argument'
    case $state in
        (command)
            __nova_commands
            ;;
        (option-or-argument)
            curcontext=${curcontext%:*:*}:nova-$words[1]:
            __nova_subcommand
            ;;
    esac
}

compdef _nova nova
#_nova "$@"
