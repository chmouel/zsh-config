#compdef nova
#autoload

# python-novaclient completion, based on help file
# https://github.com/openstack/python-novaclient

local -a _1st_arguments
_1st_arguments=(
      "absolute-limits:Print a list of absolute limits for a user"
      "actions:Retrieve server actions."
      "add-fixed-ip:Add new IP address to network."
      "add-floating-ip:Add a floating IP address to a server."
      "add-secgroup:Add a Security Group to a server."
      "agent-create:Creates a new agent build."
      "agent-delete:Deletes an existing agent build."
      "agent-list:List all builds"
      "agent-modify:Modify an existing agent build."
      "aggregate-add-host:Add the host to the specified aggregate."
      "aggregate-create:Create a new aggregate with the specified details."
      "aggregate-delete:Delete the aggregate by its id."
      "aggregate-details:Show details of the specified aggregate."
      "aggregate-list:Print a list of all aggregates."
      "aggregate-remove-host:Remove the specified host from the specified aggregate."
      "aggregate-set-metadata:Update the metadata associated with the aggregate."
      "aggregate-update:Update the aggregate's name and optionally availability zone."
      "backup:Backup a instance by create a backup type snapshot"
      "boot:Boot a new server."
      "cloudpipe-configure:Configure a cloudpipe instance for the given project"
      "cloudpipe-create:Create a cloudpipe instance for the given project"
      "cloudpipe-list:Print a list of all cloudpipe instances."
      "console-log:Get console log output of a server."
      "coverage-report:Generate a coverage report"
      "coverage-start:Start Nova coverage reporting"
      "coverage-stop:Stop Nova coverage reporting"
      "credentials:Show user credentials returned from auth"
      "delete:Immediately shut down and delete specified server(s)."
      "diagnostics:Retrieve server diagnostics."
      "dns-create:Create a DNS entry for domain, name and ip."
      "dns-create-private-domain:Create the specified DNS domain."
      "dns-create-public-domain:Create the specified DNS domain."
      "dns-delete:Delete the specified DNS entry."
      "dns-delete-domain:Delete the specified DNS domain."
      "dns-domains:Print a list of available dns domains."
      "dns-list:List current DNS entries for domain and ip or domain and name."
      "endpoints:Discover endpoints that get returned from the authenticate services"
      "fixed-ip-get:Get info on a fixed ip"
      "fixed-ip-reserve:Reserve a fixed ip"
      "fixed-ip-unreserve:Unreserve a fixed ip"
      "flavor-access-add:Add flavor access for the given tenant."
      "flavor-access-list:Print access information about the given flavor."
      "flavor-access-remove:Remove flavor access for the given tenant."
      "flavor-create:Create a new flavor"
      "flavor-delete:Delete a specific flavor"
      "flavor-key:Set or unset extra_spec for a flavor."
      "flavor-list:Print a list of available 'flavors' (sizes of servers)."
      "flavor-show:Show details about the given flavor."
      "floating-ip-bulk-create:Bulk create floating ips by range"
      "floating-ip-bulk-delete:Bulk delete floating ips by range"
      "floating-ip-bulk-list:List all floating ips"
      "floating-ip-create:Allocate a floating IP for the current tenant."
      "floating-ip-delete:De-allocate a floating IP."
      "floating-ip-list:List floating ips for this tenant."
      "floating-ip-pool-list:List all floating ip pools."
      "get-vnc-console:Get a vnc console to a server."
      "host-action:Perform a power action on a host."
      "host-describe:Describe a specific host"
      "host-list:List all hosts by service"
      "host-update:Update host settings."
      "hypervisor-list:List hypervisors."
      "hypervisor-servers:List instances belonging to specific hypervisors."
      "hypervisor-show:Display the details of the specified hypervisor."
      "hypervisor-stats:Get hypervisor statistics over all compute nodes."
      "hypervisor-uptime:Display the uptime of the specified hypervisor."
      "image-create:Create a new image by taking a snapshot of a running server."
      "image-delete:Delete an image."
      "image-list:Print a list of available images to boot from."
      "image-meta:Set or Delete metadata on an image."
      "image-show:Show details about the given image."
      "keypair-add:Create a new key pair for use with instances"
      "keypair-delete:Delete keypair by its id"
      "keypair-list:Print a list of keypairs for a user"
      "list:List active servers."
      "live-migration:Migrates a running instance to a new machine."
      "lock:Lock a server."
      "meta:Set or Delete metadata on a server."
      "migrate:Migrate a server. The new host will be selected by the scheduler."
      "network-associate-host:Associate host with network."
      "network-associate-project:Associate project with network."
      "network-create:Create a network."
      "network-disassociate:Disassociate host and/or project from the given network."
      "network-list:Print a list of available networks."
      "network-show:Show details about the given network."
      "pause:Pause a server."
      "quota-class-show:List the quotas for a quota class."
      "quota-class-update:Update the quotas for a quota class."
      "quota-defaults:List the default quotas for a tenant."
      "quota-show:List the quotas for a tenant."
      "quota-update:Update the quotas for a tenant."
      "rate-limits:Print a list of rate limits for a user"
      "reboot:Reboot a server."
      "rebuild:Shutdown, re-image, and re-boot a server."
      "remove-fixed-ip:Remove an IP address from a server."
      "remove-floating-ip:Remove a floating IP address from a server."
      "remove-secgroup:Remove a Security Group from a server."
      "rename:Rename a server."
      "rescue:Rescue a server."
      "reset-state:Reset the state of an instance"
      "resize:Resize a server."
      "resize-confirm:Confirm a previous resize."
      "resize-revert:Revert a previous resize (and return to the previous VM)."
      "resume:Resume a server."
      "root-password:Change the root password for a server."
      "scrub:Deletes data associated with the project"
      "secgroup-add-group-rule:Add a source group rule to a security group."
      "secgroup-add-rule:Add a rule to a security group."
      "secgroup-create:Create a security group."
      "secgroup-delete:Delete a security group."
      "secgroup-delete-group-rule:Delete a source group rule from a security group."
      "secgroup-delete-rule:Delete a rule from a security group."
      "secgroup-list:List security groups for the current tenant."
      "secgroup-list-rules:List rules for a security group."
      "service-disable:Disable the service"
      "service-enable:Enable the service"
      "service-list:Show a list of all running services. Filter by host & service name."
      "show:Show details about the given server."
      "ssh:SSH into a server."
      "start:Start a server."
      "stop:Stop a server."
      "suspend:Suspend a server."
      "unlock:Unlock a server."
      "unpause:Unpause a server."
      "unrescue:Unrescue a server."
      "usage-list:List usage data for all tenants"
      "volume-attach:Attach a volume to a server."
      "volume-create:Add a new volume."
      "volume-delete:Remove a volume."
      "volume-detach:Detach a volume from a server."
      "volume-list:List all the volumes."
      "volume-show:Show details about a volume."
      "volume-snapshot-create:Add a new snapshot."
      "volume-snapshot-delete:Remove a snapshot."
      "volume-snapshot-list:List all the snapshots."
      "volume-snapshot-show:Show details about a snapshot."
      "volume-type-create:Create a new volume type."
      "volume-type-delete:Delete a specific volume type"
      "volume-type-list:Print a list of available 'volume types'."
      "x509-create-cert:Create x509 cert for a user in tenant"
      "x509-get-root-cert:Fetches the x509 root cert."
      "bash-completion:Prints all of the commands and options to stdout so that the"
      "help:Display help about this program or one of its subcommands."
      "list-extensions:List all the os-api extensions that are available."
)

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
  _describe -t commands "nova help" _1st_arguments
  return
fi

local -a _command_args
case "$words[1]" in
  absolute-limits)
    _command_args=(
      '(--reserved)'--reserved"[Include reservations count.]" \
    )
    ;;
  agent-list)
    _command_args=(
      '(--hypervisor)'--hypervisor"[type of hypervisor.]" \
    )
    ;;
  boot)
    _command_args=(
      '(--falvor)'--falvor"[Flavor ID (see nova flavor-list).]" \
      '(--image)'--image"[Image ID (see nova image-list).]" \
      '(--num-instances)'--num-instances'[boot multi instances at a time]' \
      '(--meta)'--meta'[Record arbitrary key/value metadata to /meta.js on the new server. Can be specified multiple times.]' \
      '(--file)'--file'[Store arbitrary files from <src-path> locally to <dst-path> on the new server. You may store up to 5 files.]' \
      '(--key-name)'--key-name'[Key name of keypair that should be created earlier with the command keypair-add]' \
      '(--user-data)'--user-data'[user data file to pass to be exposed by the metadata server.]' \
      '(--availability-zone)'--availability-zone'[The availability zone for instance placement.]' \
      '(--security-groups)'--security-groups'[Comma separated list of security group names.]' \
      '(--block-device-mapping)'--block-device-mapping'[Block device mapping.]' \
      '(--hint)'--hint'[Send arbitrary key/value pairs to the scheduler for custom use.]' \
      '(--nic)'--nic'[Create a NIC on the server.]' \
      '(--config-drive)'--config-drive'[Enable config drive]' \
      '(--poll)'--poll'[Blocks while instance builds so progress can be reported.]' \
    )
    ;;
  console-log)
    _command_args=(
      '(--length)'--length"[Length in lines to tail.]" \
    )
    ;;
  dns-create)
    _command_args=(
      '(--type)'--type"[dns type (e.g. A)]" \
    )
    ;;
  dns-create-public-domain)
    _command_args=(
      '(--project)'--project'[Limit access to this domain to users of the specified project.]' \
    )
    ;;
  dns-create-private-domain)
    _command_args=(
      '(--availability-zone)'--availability-zone'[Limit access to this domain to instances in the specified availability zone.]' \
    )
    ;;
  dns-list)
    _command_args=(
      '(--ip)'--ip'[ip address]' \
      '(--name)'--name'[DNS name]' \
    )
    ;;
  list)
    _command_args=(
      '(--reservation-id)'--reservation-id'[Only return instances that match reservation-id.]' \
      '(--ip)'--ip'[Search with regular expression match by IP address (Admin only).]' \
      '(--ip6)'--ip6'[Search with regular expression match by IPv6 address (Admin only).]' \
      '(--name)'--name'[Search with regular expression match by name]' \
      '(--instance-name)'--instance-name'[Search with regular expression match by instance name (Admin only).]' \
      '(--status)'--status'[Search by server status]' \
      '(--flavor)'--flavor'[Search by flavor name or ID]' \
      '(--image)'--image'[Search by image name or ID]' \
      '(--host)'--host'[Search instances by hostname to which they are assigned (Admin only).]' \
      '(--all-tenants)'--all-tenants'[Display information from all tenants (Admin only).]' \
      '(--tenant)'--tenant'[Display information from single tenant (Admin only).]' \
    )
    ;;
  reboot)
    _command_args=(
      '(--hard)'--hard'[Perform a hard reboot (instead of a soft one).]' \
      '(--poll)'--poll'[Blocks while instance is rebooting.]' \
    )
    ;;
  service-list)
    _command_args=(
      '(--host)'--host'[Name of host.]' \
      '(--servicename)'--servicename'[Name of service.]' \
    )
    ;;
  show)
    _command_args=(
      '(--minimal)'--minimal'[Skips flavor/image lookups when showing instances]' \
    )
    ;;
  ssh)
    _command_args=(
      '(--port)'--port'[Optional flag to indicate which port to use for ssh.]' \
      '(--private)'--private'[Optional flag to indicate whether to use private address attached to an instance. (Default=False)]' \
      '(--ipv6)'--ipv6'[Optional flag to indicate whether to use an IPv6 address attached to an instance.]' \
      '(--login)'--login'[Login to use.]' \
      '(-i|--identity)'{-i,--identity}'[Private key file, same as the -i option to the ssh command.]' \
      '(--extra-opts)'--extra-opts'[Extra options to pass to ssh. see: man ssh]' \
    )
    ;;
  usage-list)
    _command_args=(
      '(--start)'--start'[Usage range start date ex 2012-01-20 (default: 4 weeks ago)]' \
      '(--end)'--end'[Usage range end date, ex 2012-01-20 (default: tomorrow)]' \
    )
    ;;
  volume-create)
    _command_args=(
      '(--snapshot-id)'--snapshot-id'[Optional snapshot id to create the volume from. (Default=None)]' \
      '(--image-id)'--image-id'[Optional image id to create the volume from. (Default=None)]' \
      '(--display-name)'--display-name'[Optional volume name. (Default=None)]' \
      '(--display-description)'--display-description'[Optional volume description. (Default=None)]' \
      '(--volume-type)'--volume-type'[Optional volume type. (Default=None)]' \
      '(--availability-zone)'--availability-zone'[Optional Availability Zone for volume. (Default=None)]' \
    )
    ;;
  volume-list)
    _command_args=(
      '(--all-tenants)'--all-tenants'[Display information from all tenants (Admin only).]' \
    )
    ;;
  volume-snapshot-create)
    _command_args=(
      '(--force)'--force'[Optional flag to indicate whether to snapshot a volume even if its attached to an instance. (Default=False)]' \
      '(--display-name)'--display-name'[Optional snapshot name. (Default=None)]' \
      '(--display-description)'--display-description'[Optional snapshot description. (Default=None)]' \
    )
    ;;
  esac

  _arguments \
  $_command_args \
  '(--version)'--version'[show programs version number and exit]' \
  '(--debug)'--debug'[Print debugging output]'\
  &&  return 0
