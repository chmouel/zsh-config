#compdef keystone

# python-keystoneclient completion, based on help file
# https://github.com/openstack/python-keystoneclient

local -a _1st_arguments
_1st_arguments=(
    "catalog:List catalog"
    "ec2-credentials-create:Create EC2-compatible credentials for user per tenant"
    "ec2-credentials-delete:Delete EC2-compatible credentials"
    "ec2-credentials-get:Display EC2-compatible credentials"
    "ec2-credentials-list:List EC2-compatible credentials for a user"
    "endpoint-create:Create a new endpoint associated with a service"
    "endpoint-delete:Delete a service endpoint"
    "endpoint-get:Get a service endoint"
    "endpoint-list:List configured service endpoints"
    "password-update:Update own password"
    "role-create:Create new role"
    "role-delete:Delete role"
    "role-get:Display role details"
    "role-list:List all roles"
    "service-create:Add service to Service Catalog"
    "service-delete:Delete service from Service Catalog"
    "service-get:Display service from Service Catalog"
    "service-list:List all services in Service Catalog"
    "tenant-create:Create new tenant"
    "tenant-delete:Delete tenant"
    "tenant-get:Display tenant details"
    "tenant-list:List all tenants"
    "tenant-update:Update tenant name, description, enabled status"
    "token-get:Get token"
    "user-create:Create new user"
    "user-delete:Delete user"
    "user-get:Display user details."
    "user-list:List users"
    "user-password-update:Update user password"
    "user-role-add:Add role to user"
    "user-role-list:List roles granted to a user"
    "user-role-remove:Remove role from user"
    "user-update:Update user's name, email, and enabled status"
    "discover:Discover Keystone servers, supported API versions and extensions."
    "help:Show this help"
    "bootstrap:Grants a new role to a new user on a new tenant, after creating each."
)

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
    _describe -t commands "keystone help" _1st_arguments
    return
fi

local -a _command_args
case "$words[1]" in
    catalog)
        _command_args=(
            '--service[Service type to return]:'
        )
        ;;
    ec2-credentials-get|ec2-credentials-delete)
        _command_args=(
            '--user-id[User ID]:'
            '--access[Access ID]:'
        )
        ;;
    ec2-credentials-list)
        _command_args=(
            '--user-id[User ID]:'
        )
        ;;
    endpoint-create)
        _command_args=(
            '--region[Endpoint Region]:'
            '--service-id[ID of service associated with Endpoint]:'
            '--publicurl[Public URL endpoint]:'
            '--adminurl[Admin URL endpoint]:'
            '--internalurl[Internal URL endpoint]:'
        )
        ;;
    endpoint-get)
        _command_args=(
            '--service[Service type to select]:'
            '--endpoint-type[Endpoint Type]:'
            '--attr[Service attribute to match for selection]:'
            '--value[Value of attribute to match]'
        )
        ;;
    password-update)
        _command_args=(
            '--current-password[Current password, Defaults to the password as set by --os-password or OS_PASSWORD]:'
            '--new-password[Desired new password]:'
        )
        ;;
    role-create)
        _command_args=(
            '--name[Name of new role]:'
        )
        ;;
    service-create)
        _command_args=(
            '--name[Name of new role]:'
            '--type[Service type (one of: identity, compute, network, image, or object-store)]:'
            '--description[Service description]:'
        )
        ;;
    tenant-create|tenant-update)
        _command_args=(
            '--name[New tenant name (must be unique)]:'
            '--enabled[Initial tenant enabled status (default true)]:'
            '--description[Tenant description]:'
        )
        ;;
    token-get)
        _command_args=(
            '--wrap[wrap PKI tokens to a specified length, or 0 to disable]:'
        )
        ;;
    user-list)
        _command_args=(
            '--tenant-id[New user default tenant]:'
        )
        ;;
    user-password-update)
        _command_args=(
            '--pass[Desired new password]:'
        )
        ;;
    user-role-add|user-role-remove)
        _command_args=(
            '--user[Name or ID of user]:'
            '--role[Name or ID of role]:'
            '--tenant[Name or ID of tenant]:'
        )
        ;;
    user-role-list)
        _command_args=(
            '--user[Name or ID of user]:'
            '--tenant[Name or ID of tenant]:'
        )
        ;;
    user-create)
        _command_args=(
            '--name[New user name (must be unique)]:'
            '--tenant-id[New user default tenant]:'
            '--pass[New user pass]:'
            '--email[New user email address]:'
            '--enabled[Initial tenant enabled status (default true)]:'
        )
        ;;
    user-update)
        _command_args=(
            '--name[Desired new user name]:'
            '--enabled[Enable or disable user]:'
            '--email[Desired new user email]:'
        )
        ;;
    bootstrap)
        _command_args=(
            '--user-name[The name of the user to be created (default="admin").]:'
            '--role-name[The name of the role to be created and granted to the user (default="admin").]:'
            '--tenant-name[The name of the tenant to be created (default="admin").]:'
            '--pass[The password for the new user]:'
        )
        ;;
    help)
        _describe -t commands "keystone help" _1st_arguments
        return 0
        ;;
esac

_arguments \
    $_command_args \
    '(--version)'--version'[show programs version number and exit]' \
    '(--debug)'--debug'[Print debugging output]'\
  &&  return 0
